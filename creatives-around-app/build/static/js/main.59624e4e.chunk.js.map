{"version":3,"sources":["images/ca_logo_white.svg","context/AppContext.js","components/Logo.js","components/LoginForm.js","components/RegisterForm.js","components/LoginContainer.js","context/DataService.js","components/Homepage.js","components/Users.js","components/Content.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","AppContext","React","createContext","Logo","className","src","LogoImage","alt","LoginForm","action","method","htmlFor","type","name","value","RegisterForm","context","useContext","useState","nickname","email","password","data","setData","changeInput","e","target","onSubmit","preventDefault","createUser","onChange","LoginContainer","DataService","app","this","state","user","setUp","fetchUser","getLocation","rawLocation","location","lon","coords","longitude","lat","latitude","updateLocation","setState","fetch","response","json","console","log","headers","body","JSON","stringify","error","filter","users","window","reload","Promise","res","rej","navigator","geolocation","getCurrentPosition","position","err","newState","Homepage","Users","pagination","maxDistance","pageIndex","pageSize","getUsers","map","Component","contextType","Content","onClick","logout","country","city","code","district","street","house","exact","path","component","App","props","dataProvider","Provider","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.59624e4e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ca_logo_white.31e5cc39.svg\";","import React from 'react';\nexport const AppContext = React.createContext({});\n","import React from 'react';\nimport LogoImage from \"../images/ca_logo_white.svg\"\nimport '../styles/App.css'\n\nexport default function Logo() {\n    return (\n        <div className=\"Logo\">\n            <img src={LogoImage} alt=\"Logo\" />\n        </div>\n    )\n}\n","import React from 'react';\n\nexport default function LoginForm() {\n  return (\n    <form action='/api/auth/login' method='POST'>\n      <div>\n        <label htmlFor='email'>Email</label>\n        <input type='email' name='email' value='test@test.com' />\n      </div>\n      <div>\n        <label htmlFor='password'>Password</label>\n        <input type='password' name='password' value='123456' />\n      </div>\n      <div>\n        <button type='submit'>Login</button>\n      </div>\n    </form>\n  );\n}\n","import React from 'react';\nimport { AppContext } from '../context/AppContext';\n\nexport default function RegisterForm() {\n  const context = React.useContext(AppContext);\n  const [data, setData] = React.useState({\n    nickname: 'karol',\n    email: 'test@test.com',\n    password: '123456',\n  });\n  const submitForm = (e) => {\n    e.preventDefault();\n    context.createUser(data);\n  };\n  const changeInput = (e) => {\n    setData({ ...data, [e.target.name]: e.target.value });\n  };\n  return (\n    <form onSubmit={submitForm}>\n      <div>\n        <label htmlFor='nickname'>Nickname</label>\n        <input type='text' name='nickname' value={data.nickname} onChange={changeInput} />\n      </div>\n      <div>\n        <label htmlFor='email'>Email address</label>\n        <input type='email' name='email' value={data.email} onChange={changeInput} />\n      </div>\n      <div>\n        <label htmlFor='password'>Password</label>\n        <input type='password' name='password' value={data.password} onChange={changeInput} />\n      </div>\n      <div>\n        <button type='submit'>Register</button>\n      </div>\n    </form>\n  );\n}\n","import React from 'react';\nimport Logo from './Logo';\nimport LoginForm from './LoginForm';\nimport RegisterForm from './RegisterForm';\n\nexport default function LoginContainer() {\n  return (\n    <div className='App-Container'>\n      <Logo />\n      <LoginForm />\n      <RegisterForm />\n    </div>\n  );\n}\n","export default class DataService {\n  constructor(app) {\n    this.app = app;\n    this.app.state = { user: null };\n    this.setUp();\n  }\n  get data() {\n    return this.app.state;\n  }\n  set data(newState) {\n    this.app.setState(newState);\n  }\n  // SETTING UP CONTEXT\n  async setUp() {\n    const user = await this.fetchUser();\n    if (!user) {\n      return;\n    }\n    const rawLocation = await this.getLocation();\n    const location = {\n      lon: rawLocation.coords.longitude,\n      lat: rawLocation.coords.latitude,\n    };\n    // ONLY FOR TESTING\n    await this.updateLocation(location);\n    this.app.setState({ ...this.app.state, user });\n  }\n  // FETCHIN LOGGED IN USER DATA\n  async fetchUser() {\n    try {\n      const response = await fetch('/api/user');\n      const user = await response.json();\n      return user;\n    } catch (error) {\n      console.log('not ok');\n    }\n  }\n  // CREATING USER\n  async createUser(user) {\n    try {\n      await fetch('/api/user', {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json',\n        },\n        body: JSON.stringify(user),\n      });\n      console.log('User successfuly created');\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  // FETCHING ORHER USERS BASED ON FILTER\n  async getUsers(filter) {\n    try {\n      const response = await fetch('/api/user/all', {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json',\n        },\n        body: JSON.stringify(filter),\n      });\n      const users = await response.json();\n      return users;\n    } catch (error) {\n      console.error(error);\n      return [];\n    }\n  }\n  // LOGOUT\n  async logout() {\n    try {\n      await fetch('/api/auth/logout');\n      window.location.reload();\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  // GET CURRENT LOCATION OF USER\n  async getLocation() {\n    return new Promise((res, rej) => {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          return res(position);\n        },\n        (err) => {\n          rej(err);\n        }\n      );\n    });\n  }\n  // UPDATE LOCATION\n  async updateLocation(location) {\n    try {\n      await fetch('/api/user', {\n        method: 'PATCH',\n        headers: {\n          'content-type': 'application/json',\n        },\n        body: JSON.stringify({ location }),\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n}\n","import React from 'react';\n\nexport default function Homepage() {\n  return <div>Homepage</div>;\n}\n","import React, { Component } from 'react';\nimport { AppContext } from '../context/AppContext';\n\nexport default class Users extends Component {\n  static contextType = AppContext;\n  state = {\n    users: [],\n    filter: {\n      pagination: {\n        maxDistance: 0,\n        pageIndex: 0,\n        pageSize: 20,\n      },\n    },\n  };\n  async componentDidMount() {\n    const users = await this.context.getUsers(this.state.filter);\n    this.setState({ ...this.state, users });\n  }\n  render() {\n    return (\n      <div>\n        List of all users\n        {this.state.users.map((user) => (\n          <p>{`Email: ${user.email}, Nickname:${user.nickname}`}</p>\n        ))}\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { AppContext } from '../context/AppContext';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Homepage from './Homepage';\nimport Users from './Users';\n\nexport default class Content extends Component {\n  static contextType = AppContext;\n  render() {\n    const { user } = this.context.data;\n    return (\n      <div>\n        <p>{`Logged in as ${user.nickname}`}</p>\n        <button onClick={this.context.logout}>Logout</button>\n        <p>\n          Coordinates fetched from browser:\n          {`Latitude: ${user.location.lat}, Longitude: ${user.location.lon}`}\n        </p>\n        <p>\n          Coordinates translated to address:\n          {`${user.location.country}, ${user.location.city} ${user.location.code}, ${user.location.district}, ${user.location.street} ${user.location.house}`}\n        </p>\n        <Router>\n          <Switch>\n            <Route exact path='/users' component={Users} />\n            <Route exact path='/' component={Homepage} />\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { AppContext } from '../context/AppContext';\nimport '../styles/App.css';\nimport LoginContainer from './LoginContainer';\nimport DataService from '../context/DataService';\n\nimport Content from './Content';\n\nclass App extends React.Component {\n  static contextType = AppContext;\n  constructor(props) {\n    super(props);\n    this.dataProvider = new DataService(this);\n  }\n  render() {\n    return (\n      <AppContext.Provider value={this.dataProvider}>\n        {this.state.user ? <Content /> : <LoginContainer />}\n        Hello world\n      </AppContext.Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}